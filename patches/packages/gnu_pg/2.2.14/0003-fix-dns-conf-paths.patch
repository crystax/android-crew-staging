diff -Naurw a/dirmngr/dns-stuff.c b/dirmngr/dns-stuff.c
--- a/dirmngr/dns-stuff.c	2019-03-07 15:03:15.000000000 +0300
+++ b/dirmngr/dns-stuff.c	2019-03-25 19:53:13.300875619 +0300
@@ -52,6 +52,8 @@
 #include <unistd.h>
 
 
+#include <crystax.h>
+
 /* William Ahern's DNS library, included as a source copy.  */
 #ifdef USE_LIBDNS
 # include "dns.h"
@@ -405,7 +407,7 @@
   return 0;
 #else
   static time_t last_mtime;
-  const char *fname = RESOLV_CONF_NAME;
+  char *fname = xtryasprintf ("%s/%s", crystax_posix_base (), RESOLV_CONF_NAME);
   struct stat statbuf;
   int changed = 0;
 
@@ -424,6 +426,7 @@
       last_mtime = statbuf.st_mtime;
     }
 
+  xfree (fname);
   return changed;
 #endif
 }
@@ -439,6 +442,7 @@
   struct libdns_s ld;
   int derr;
   char *cfgstr = NULL;
+  const char *crystax_base = crystax_posix_base ();
 
   if (libdns.resolv_conf)
     return 0; /* Already initialized.  */
@@ -532,9 +536,8 @@
       xfree (ninfo);
 
 #else /* Unix */
-      const char *fname;
+      char *fname = xtryasprintf ("%s/%s", crystax_base, RESOLV_CONF_NAME);
 
-      fname = RESOLV_CONF_NAME;
       resolv_conf_changed_p (); /* Reset timestamp.  */
       err = libdns_error_to_gpg_error
         (dns_resconf_loadpath (ld.resolv_conf, fname));
@@ -544,7 +547,9 @@
           goto leave;
         }
 
-      fname = "/etc/nsswitch.conf";
+      xfree (fname);
+
+      fname = xtryasprintf ("%s/%s", crystax_base, "/etc/nsswitch.conf");
       err = libdns_error_to_gpg_error
         (dns_nssconf_loadpath (ld.resolv_conf, fname));
       if (err)
@@ -578,6 +583,7 @@
             log_error ("failed to append DNS to resolution order\n");
         }
 
+      xfree (fname);
 #endif /* Unix */
     }
 
@@ -593,6 +599,9 @@
 #if HAVE_W32_SYSTEM
     char *hosts_path = xtryasprintf ("%s\\System32\\drivers\\etc\\hosts",
                                      getenv ("SystemRoot"));
+#else
+    char *hosts_path = xtryasprintf ("%s/%s", crystax_base, "/etc/hosts");
+#endif
     if (! hosts_path)
       {
         err = gpg_error_from_syserror ();
@@ -601,9 +610,6 @@
 
     derr = dns_hosts_loadpath (ld.hosts, hosts_path);
     xfree (hosts_path);
-#else
-    derr = dns_hosts_loadpath (ld.hosts, "/etc/hosts");
-#endif
     if (derr)
       {
         err = libdns_error_to_gpg_error (derr);
diff -Naurw a/dirmngr/dns.c b/dirmngr/dns.c
--- a/dirmngr/dns.c	2019-03-07 15:03:15.000000000 +0300
+++ b/dirmngr/dns.c	2019-03-25 19:53:25.116772884 +0300
@@ -77,7 +77,10 @@
 #include <netdb.h>		/* struct addrinfo */
 #endif
 
+#include <crystax.h>
+
 #include "gpgrt.h"   /* For GGPRT_GCC_VERSION */
+#include "util.h"
 #include "dns.h"
 
 
@@ -5108,18 +5111,22 @@
 struct dns_hosts *dns_hosts_local(int *error_) {
 	struct dns_hosts *hosts;
 	int error;
+    char *hosts_file = xtryasprintf ("%/%s", crystax_posix_base (), "/etc/hosts");
 
 	if (!(hosts = dns_hosts_open(&error)))
 		goto error;
 
-	if ((error = dns_hosts_loadpath(hosts, "/etc/hosts")))
+	if ((error = dns_hosts_loadpath(hosts, hosts_file)))
 		goto error;
 
+    xfree(hosts_file);
+
 	return hosts;
 error:
 	*error_	= error;
 
 	dns_hosts_close(hosts);
+    xfree(hosts_file);
 
 	return 0;
 } /* dns_hosts_local() */
@@ -5425,11 +5432,14 @@
 struct dns_resolv_conf *dns_resconf_local(int *error_) {
 	struct dns_resolv_conf *resconf;
 	int error;
+    const char *crystax_base = crystax_posix_base ();
+    char *resolv_conf_file = xtryasprintf ("%/%s", crystax_base, "/etc/resolv.conf");
+    char *nsswitch_conf_file = xtryasprintf ("%/%s", crystax_base, "/etc/nsswitch.conf");
 
 	if (!(resconf = dns_resconf_open(&error)))
 		goto error;
 
-	if ((error = dns_resconf_loadpath(resconf, "/etc/resolv.conf"))) {
+	if ((error = dns_resconf_loadpath(resconf, resolv_conf_file))) {
 		/*
 		 * NOTE: Both the glibc and BIND9 resolvers ignore a missing
 		 * /etc/resolv.conf, defaulting to a nameserver of
@@ -5441,16 +5451,21 @@
 			goto error;
 	}
 
-	if ((error = dns_nssconf_loadpath(resconf, "/etc/nsswitch.conf"))) {
+	if ((error = dns_nssconf_loadpath(resconf, nsswitch_conf_file))) {
 		if (error != ENOENT)
 			goto error;
 	}
 
+    xfree(resolv_conf_file);
+    xfree(nsswitch_conf_file);
+
 	return resconf;
 error:
 	*error_	= error;
 
 	dns_resconf_close(resconf);
+    xfree(resolv_conf_file);
+    xfree(nsswitch_conf_file);
 
 	return 0;
 } /* dns_resconf_local() */
@@ -10456,15 +10471,21 @@
 	const char *path;
 	unsigned i;
 	int error;
+    char *resolv_conf_file;
+    char *nsswitch_conf_file;
+    const char *crystax_base = crystax_posix_base ();
 
 	if (*resconf)
 		return *resconf;
 
+     resolv_conf_file = xtryasprintf ("%/%s", crystax_base, RESOLV_CONF_NAME);
+     nsswitch_conf_file = xtryasprintf ("%/%s", crystax_base, "/etc/nsswitch.conf");
+
 	if (!(*resconf = dns_resconf_open(&error)))
 		panic("dns_resconf_open: %s", dns_strerror(error));
 
 	if (!MAIN.resconf.count)
-		MAIN.resconf.path[MAIN.resconf.count++]	= "/etc/resolv.conf";
+		MAIN.resconf.path[MAIN.resconf.count++]	= resconf_file;
 
 	for (i = 0; i < MAIN.resconf.count; i++) {
 		path	= MAIN.resconf.path[i];
@@ -10491,7 +10512,7 @@
 	}
 
 	if (!MAIN.nssconf.count) {
-		path = "/etc/nsswitch.conf";
+		path = nsswitch_conf_file;
 
 		if (!(error = dns_nssconf_loadpath(*resconf, path)))
 			MAIN.nssconf.path[MAIN.nssconf.count++] = path;
@@ -10499,6 +10520,9 @@
 			panic("%s: %s", path, dns_strerror(error));
 	}
 
+    xfree(resolv_conf_file);
+    xfree(nsswitch_conf_file);
+
 	return *resconf;
 } /* resconf() */
 
@@ -10508,17 +10532,20 @@
 	const char *path;
 	unsigned i;
 	int error;
+    char *hosts_file = 0;
 
 	if (*hosts)
 		return *hosts;
 
+    hosts_file = xtryasprintf ("%/%s", crystax_posix_base (), "/etc/hosts");
 	if (!MAIN.hosts.count) {
-		MAIN.hosts.path[MAIN.hosts.count++]	= "/etc/hosts";
+		MAIN.hosts.path[MAIN.hosts.count++]	= hosts_file;
 
 		/* Explicitly test dns_hosts_local() */
 		if (!(*hosts = dns_hosts_local(&error)))
 			panic("%s: %s", "/etc/hosts", dns_strerror(error));
 
+        xfree(hosts_file);
 		return *hosts;
 	}
 
@@ -10537,6 +10564,8 @@
 			panic("%s: %s", path, dns_strerror(error));
 	}
 
+    xfree(hosts_file);
+
 	return *hosts;
 } /* hosts() */
 
