diff -Naurw a/apt-pkg/init.cc b/apt-pkg/init.cc
--- a/apt-pkg/init.cc	2018-04-20 13:08:18.000000000 +0300
+++ b/apt-pkg/init.cc	2018-06-14 16:39:12.982572590 +0300
@@ -18,6 +18,8 @@
 #include <apt-pkg/pkgsystem.h>
 #include <apt-pkg/strutl.h>
 
+#include <crystax.h>
+
 #include <cstdlib>
 #include <fstream>
 #include <sstream>
@@ -39,6 +41,22 @@
    APT_HIDDEN extern std::unordered_map<std::string, std::vector<std::string>> ArchToTupleMap;
 }
 
+extern std::string getCrystaxBaseDir();
+
+std::string getCrystaxBaseDir()
+{
+   std::string basedir = crystax_posix_base();
+   if (basedir[0] == '/')
+      basedir.erase(0, 1);
+   if (basedir.size() > 0) {
+      int ind = basedir.size() - 1;
+      if (basedir[ind] == '/')
+         basedir.erase(ind, 1);
+   }
+
+   return basedir;
+}
+
 // Splits by whitespace. There may be continuous spans of whitespace - they
 // will be considered as one.
 static std::vector<std::string> split(std::string const & s)
@@ -57,9 +75,10 @@
 /* This initializes */
 static bool pkgInitArchTupleMap()
 {
-   auto tuplepath = _config->FindFile("Dir::dpkg::tupletable", DPKG_DATADIR "/tupletable");
-   auto tripletpath = _config->FindFile("Dir::dpkg::triplettable", DPKG_DATADIR "/triplettable");
-   auto cpupath = _config->FindFile("Dir::dpkg::cputable", DPKG_DATADIR "/cputable");
+   std::string dpkgdatadir = getCrystaxBaseDir() + "/usr/share/dpkg";
+   auto tuplepath = _config->FindFile("Dir::dpkg::tupletable", (dpkgdatadir + "/tupletable").c_str());
+   auto tripletpath = _config->FindFile("Dir::dpkg::triplettable", (dpkgdatadir + "/triplettable").c_str());
+   auto cpupath = _config->FindFile("Dir::dpkg::cputable", (dpkgdatadir + "/cputable").c_str());
 
    // Load a list of CPUs
    std::vector<std::string> cpus;
@@ -126,6 +145,13 @@
    is prepended, this allows a fair degree of flexability. */
 bool pkgInitConfig(Configuration &Cnf)
 {
+   std::string basedir = getCrystaxBaseDir();
+   std::string statedir   = basedir + "/var/lib/apt";
+   std::string cachedir   = basedir + "/var/cache/apt";
+   std::string confdir    = basedir + "/etc/apt";
+   std::string libexecdir = basedir + "/usr/libexec/apt";
+   std::string logdir     = basedir + "/var/log/apt";
+
    // General APT things
    Cnf.CndSet("APT::Architecture", COMMON_ARCH);
    if (Cnf.Exists("APT::Build-Essential") == false)
@@ -135,18 +161,18 @@
    Cnf.CndSet("Dir","/");
    
    // State
-   Cnf.CndSet("Dir::State", STATE_DIR + 1);
+   Cnf.CndSet("Dir::State", statedir);
    Cnf.CndSet("Dir::State::lists","lists/");
    Cnf.CndSet("Dir::State::cdroms","cdroms.list");
 
    // Cache
-   Cnf.CndSet("Dir::Cache", CACHE_DIR + 1);
+   Cnf.CndSet("Dir::Cache", cachedir);
    Cnf.CndSet("Dir::Cache::archives","archives/");
    Cnf.CndSet("Dir::Cache::srcpkgcache","srcpkgcache.bin");
    Cnf.CndSet("Dir::Cache::pkgcache","pkgcache.bin");
 
    // Configuration
-   Cnf.CndSet("Dir::Etc", CONF_DIR + 1);
+   Cnf.CndSet("Dir::Etc", confdir);
    Cnf.CndSet("Dir::Etc::sourcelist","sources.list");
    Cnf.CndSet("Dir::Etc::sourceparts","sources.list.d");
    Cnf.CndSet("Dir::Etc::main","apt.conf");
@@ -156,13 +182,13 @@
    Cnf.CndSet("Dir::Etc::preferencesparts","preferences.d");
    Cnf.CndSet("Dir::Etc::trusted", "trusted.gpg");
    Cnf.CndSet("Dir::Etc::trustedparts","trusted.gpg.d");
-   Cnf.CndSet("Dir::Bin::methods", LIBEXEC_DIR "/methods");
-   Cnf.CndSet("Dir::Bin::solvers::",LIBEXEC_DIR  "/solvers");
-   Cnf.CndSet("Dir::Bin::planners::",LIBEXEC_DIR  "/planners");
-   Cnf.CndSet("Dir::Media::MountPath","/media/apt");
+   Cnf.CndSet("Dir::Bin::methods", libexecdir + "/methods");
+   Cnf.CndSet("Dir::Bin::solvers::", libexecdir + "/solvers");
+   Cnf.CndSet("Dir::Bin::planners::", libexecdir + "/planners");
+   Cnf.CndSet("Dir::Media::MountPath", basedir + "/media/apt");
 
    // State
-   Cnf.CndSet("Dir::Log", LOG_DIR + 1);
+   Cnf.CndSet("Dir::Log", logdir);
    Cnf.CndSet("Dir::Log::Terminal","term.log");
    Cnf.CndSet("Dir::Log::History","history.log");
    Cnf.CndSet("Dir::Log::Planner","eipp.log.xz");
@@ -182,7 +208,7 @@
    Cnf.CndSet("Acquire::AllowDowngradeToInsecureRepositories", false);
 
    // Default cdrom mount point
-   Cnf.CndSet("Acquire::cdrom::mount", "/media/cdrom/");
+   Cnf.CndSet("Acquire::cdrom::mount", basedir + "/media/cdrom/");
 
    // The default user we drop to in the methods
    Cnf.CndSet("APT::Sandbox::User", "_apt");
@@ -211,6 +237,8 @@
    Cnf.CndSet("Acquire::Changelogs::URI::Origin::Ultimedia", "http://packages.ultimediaos.com/changelogs/pool/@CHANGEPATH@/changelog.txt");
    Cnf.CndSet("Acquire::Changelogs::AlwaysOnline::Origin::Ubuntu", true);
 
+   Cnf.CndSet("Acquire::Languages", "none");
+
    // Read an alternate config file
    _error->PushToStack();
    const char *Cfg = getenv("APT_CONFIG");
